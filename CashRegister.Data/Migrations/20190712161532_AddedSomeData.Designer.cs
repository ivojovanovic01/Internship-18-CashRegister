// <auto-generated />
using System;
using CashRegister.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CashRegister.Data.Migrations
{
    [DbContext(typeof(CashRegisterContext))]
    [Migration("20190712161532_AddedSomeData")]
    partial class AddedSomeData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CashRegister.Data.Entities.Models.CashRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("CashRegisters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Blagajna 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blagajna 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blagajna 3"
                        });
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.CashRegisterCashier", b =>
                {
                    b.Property<int>("CashRegisterId");

                    b.Property<int>("CashierId");

                    b.HasKey("CashRegisterId", "CashierId");

                    b.HasIndex("CashierId");

                    b.ToTable("CashRegisterCashiers");

                    b.HasData(
                        new
                        {
                            CashRegisterId = 1,
                            CashierId = 1
                        },
                        new
                        {
                            CashRegisterId = 1,
                            CashierId = 2
                        },
                        new
                        {
                            CashRegisterId = 1,
                            CashierId = 3
                        },
                        new
                        {
                            CashRegisterId = 2,
                            CashierId = 1
                        },
                        new
                        {
                            CashRegisterId = 2,
                            CashierId = 2
                        },
                        new
                        {
                            CashRegisterId = 3,
                            CashierId = 3
                        });
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.Cashier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Cashiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Ana",
                            LastName = "Anic",
                            Password = "2212ana",
                            Username = "aanic123"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Lidija",
                            LastName = "Bacic",
                            Password = "lidijalile123",
                            Username = "lile123"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Lana",
                            LastName = "Lanic",
                            Password = "12301lanica",
                            Username = "lanci123"
                        });
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableQuantity");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("Price");

                    b.Property<int>("TaxType");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableQuantity = 1000,
                            Barcode = "9007352892847",
                            Name = "Coca-Cola",
                            Price = 12.49,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableQuantity = 100000,
                            Barcode = "1279642523276",
                            Name = "vrecica treger",
                            Price = 0.59999999999999998,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailableQuantity = 1000,
                            Barcode = "2582141461919",
                            Name = "pivo Karlovacko 0.5l",
                            Price = 6.9900000000000002,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailableQuantity = 20000,
                            Barcode = "1973408785484",
                            Name = "rajcica pasirana",
                            Price = 7.9900000000000002,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 5,
                            AvailableQuantity = 30000,
                            Barcode = "6582196977316",
                            Name = "kecap blagi",
                            Price = 10.99,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 6,
                            AvailableQuantity = 70000,
                            Barcode = "2165881107496",
                            Name = "cedevita limun",
                            Price = 12.49,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 7,
                            AvailableQuantity = 20,
                            Barcode = "5776819685170",
                            Name = "bijeli kruh",
                            Price = 8.0,
                            TaxType = 0
                        },
                        new
                        {
                            Id = 8,
                            AvailableQuantity = 3,
                            Barcode = "8250035889203",
                            Name = "crni kruh",
                            Price = 10.0,
                            TaxType = 0
                        },
                        new
                        {
                            Id = 9,
                            AvailableQuantity = 1000,
                            Barcode = "7431679019460",
                            Name = "cokolada Milka 100g",
                            Price = 10.0,
                            TaxType = 1
                        },
                        new
                        {
                            Id = 10,
                            AvailableQuantity = 100,
                            Barcode = "8147969019356",
                            Name = "sladoled Snjeguljica",
                            Price = 8.0,
                            TaxType = 1
                        });
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CashRegisterId");

                    b.Property<int?>("CashierId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<double>("TaxFreePrice");

                    b.Property<double>("TotalDirectTax");

                    b.Property<double>("TotalExciseTax");

                    b.Property<double>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("CashierId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbd8f8ef-464d-4697-9c74-1ddc09bd1ddb"),
                            CreatedTime = new DateTime(2019, 7, 12, 18, 15, 31, 494, DateTimeKind.Local).AddTicks(377),
                            TaxFreePrice = 100.0,
                            TotalDirectTax = 12.0,
                            TotalExciseTax = 12.0,
                            TotalPrice = 12.0
                        });
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.ReceiptProduct", b =>
                {
                    b.Property<Guid>("ReceiptId");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductQuantity");

                    b.Property<int>("ProductTaxType");

                    b.Property<double>("ProductUnitPrice");

                    b.HasKey("ReceiptId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ReceiptProducts");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("cbd8f8ef-464d-4697-9c74-1ddc09bd1ddb"),
                            ProductId = 1,
                            ProductQuantity = 10,
                            ProductTaxType = 1,
                            ProductUnitPrice = 10.0
                        });
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.CashRegisterCashier", b =>
                {
                    b.HasOne("CashRegister.Data.Entities.Models.CashRegister", "CashRegister")
                        .WithMany("CashRegisterCashiers")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CashRegister.Data.Entities.Models.Cashier", "Cashier")
                        .WithMany("CashRegisterCashiers")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.Receipt", b =>
                {
                    b.HasOne("CashRegister.Data.Entities.Models.CashRegister", "CashRegister")
                        .WithMany("Receipts")
                        .HasForeignKey("CashRegisterId");

                    b.HasOne("CashRegister.Data.Entities.Models.Cashier", "Cashier")
                        .WithMany("Receipts")
                        .HasForeignKey("CashierId");
                });

            modelBuilder.Entity("CashRegister.Data.Entities.Models.ReceiptProduct", b =>
                {
                    b.HasOne("CashRegister.Data.Entities.Models.Product", "Product")
                        .WithMany("ReceiptProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CashRegister.Data.Entities.Models.Receipt", "Receipt")
                        .WithMany("ReceiptProducts")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
